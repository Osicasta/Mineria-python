# -*- coding: utf-8 -*-
"""Despliegue_CalidadAgua_Stremlite.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J8NXSvjfh3_8dmtaIOhT7pLXewZi6VtS

# Despliegue

- Cargamos el modelo
- Cargamos los datos futuros
- Preparar los datos futuros
- Aplicamos el modelo para la predicci칩n
"""

#Importamos librer칤as b치sicas
import pandas as pd # manipulacion dataframes
import numpy as np  # matrices y vectores
import matplotlib.pyplot as plt #gr치fica

#Cargamos el modelo
import pickle
filename = 'modelo-clas-hiper.pkl'
modelTree,labelencoder,variables,min_max_scaler = pickle.load(open(filename, 'rb'))
#Tienen que ponerse en el mismo orden que se guardaron

#Cargamos los datos futuros
#data = pd.read_csv("datosFuturosCalidadAgua.csv")
#data.head()

import streamlit as st
import pandas as pd
import plotly.express as px

# --- CONFIGURACI칍N GENERAL ---
st.set_page_config(page_title="Visualizaci칩n de Calidad del Agua", page_icon="游눦", layout="centered", initial_sidebar_state="expanded")

# --- ESTILO PERSONALIZADO ---
st.markdown("""
    <style>
    .main {
        background-color: #f0f8ff; /* AliceBlue */
        color: #2F4F4F; /* DarkSlateGray */
        font-family: 'Arial';
    }
    .stButton>button {
        background-color: #ADD8E6; /* LightBlue */
        color: black;
        border-radius: 12px;
        height: 3em;
        width: 100%;
    }
    .stSlider > div {
        color: #4682B4; /* SteelBlue */
    }
    .stSelectbox > div {
        color: #4682B4; /* SteelBlue */
    }
    .css-1d391kg {
        background-color: #E0FFFF; /* LightCyan */
    }
    </style>
""", unsafe_allow_html=True)

# --- ENCABEZADO ---
st.title("游눦 Visualizaci칩n de 칈ndices de Calidad del Agua")
st.markdown("Explora los niveles de riesgo de calidad del agua por municipio y a침o.")

# --- CARGA DE DATOS (Simulaci칩n con los datos que proporcionaste) ---
data = pd.DataFrame({
    'Departamento': ['Sucre', 'Sucre', 'Tolima', 'Antioquia', 'Antioquia', 'Bol칤var'],
    'Municipio': ['Galeras', 'Galeras', 'Rioblanco', 'Medell칤n', 'Amalfi', 'Santa Rosa'],
    'A침o': [2017, 2018, 2013, 2010, 2009, 2011],
    'IRCA': [53.0, 12.0, 11.6, 1.4, 0.7, 27.6],
    'IRCAurbano': [48.5, 12.0, 15.64, 0.5, 0.7, 28.5],
    'Nivel de riesgo urbano': ['Riesgo alto', 'Riesgo bajo', 'Riesgo medio', 'Sin riesgo', 'Sin riesgo', 'Riesgo medio'],
    'IRCArural': [38.53, 38.53, 38.53, 2.6, 38.53, 18.8],
    'Nivel de riesgo rural': ['Riesgo alto', 'Riesgo alto', 'Riesgo alto', 'Sin riesgo', 'Riesgo alto', 'Riesgo medio']
})

# --- FILTROS EN LA BARRA LATERAL ---
st.sidebar.header("Filtros 丘뙖잺")
selected_departamento = st.sidebar.selectbox("Selecciona un Departamento", ['Todos'] + list(data['Departamento'].unique()))
selected_municipio = st.sidebar.selectbox("Selecciona un Municipio", ['Todos'])
selected_a침o = st.sidebar.selectbox("Selecciona un A침o", ['Todos'] + list(data['A침o'].unique()))
risk_levels_urbano = ['Todos'] + list(data['Nivel de riesgo urbano'].unique())
selected_riesgo_urbano = st.sidebar.selectbox("Selecciona un Nivel de Riesgo Urbano", risk_levels_urbano)
risk_levels_rural = ['Todos'] + list(data['Nivel de riesgo rural'].unique())
selected_riesgo_rural = st.sidebar.selectbox("Selecciona un Nivel de Riesgo Rural", risk_levels_rural)

# --- FILTRADO DE DATOS ---
filtered_data = data.copy()

if selected_departamento != 'Todos':
    filtered_data = filtered_data[filtered_data['Departamento'] == selected_departamento]

if selected_municipio != 'Todos':
    filtered_data = filtered_data[filtered_data['Municipio'] == selected_municipio]

if selected_a침o != 'Todos':
    filtered_data = filtered_data[filtered_data['A침o'] == selected_a침o]

if selected_riesgo_urbano != 'Todos':
    filtered_data = filtered_data[filtered_data['Nivel de riesgo urbano'] == selected_riesgo_urbano]

if selected_riesgo_rural != 'Todos':
    filtered_data = filtered_data[filtered_data['Nivel de riesgo rural'] == selected_riesgo_rural]

# --- ACTUALIZACI칍N DEL SELECTOR DE MUNICIPIOS (dependiente del departamento) ---
if selected_departamento != 'Todos':
    municipios = ['Todos'] + list(filtered_data['Municipio'].unique())
    selected_municipio = st.sidebar.selectbox("Selecciona un Municipio", municipios)
    if selected_municipio != 'Todos':
        filtered_data = filtered_data[filtered_data['Municipio'] == selected_municipio]

# --- VISUALIZACIONES ---
st.header("游늵 Visualizaci칩n de los Datos Filtrados")

if filtered_data.empty:
    st.info("No hay datos que coincidan con los filtros seleccionados.")
else:
    # 1. Distribuci칩n de Niveles de Riesgo Urbano
    fig_riesgo_urbano = px.bar(filtered_data, x='Municipio', color='Nivel de riesgo urbano',
                               title='Distribuci칩n del Nivel de Riesgo Urbano por Municipio',
                               labels={'Nivel de riesgo urbano': 'Nivel de Riesgo Urbano', 'Municipio': 'Municipio'})
    st.plotly_chart(fig_riesgo_urbano)

    # 2. Distribuci칩n de Niveles de Riesgo Rural
    fig_riesgo_rural = px.bar(filtered_data, x='Municipio', color='Nivel de riesgo rural',
                              title='Distribuci칩n del Nivel de Riesgo Rural por Municipio',
                              labels={'Nivel de riesgo rural': 'Nivel de Riesgo Rural', 'Municipio': 'Municipio'})
    st.plotly_chart(fig_riesgo_rural)

    # 3. Evoluci칩n del IRCA Urbano por A침o (si hay m칰ltiples a침os)
    if len(filtered_data['A침o'].unique()) > 1:
        fig_irca_urbano_a침o = px.line(filtered_data, x='A침o', y='IRCAurbano', color='Municipio',
                                     title='Evoluci칩n del IRCA Urbano por A침o y Municipio',
                                     labels={'IRCAurbano': 'IRCA Urbano', 'A침o': 'A침o', 'Municipio': 'Municipio'})
        st.plotly_chart(fig_irca_urbano_a침o)

    # 4. Dispersi칩n IRCA Urbano vs. IRCA Rural
    fig_scatter_irca = px.scatter(filtered_data, x='IRCAurbano', y='IRCArural', color='Municipio',
                                  title='Relaci칩n entre IRCA Urbano e IRCA Rural',
                                  labels={'IRCAurbano': 'IRCA Urbano', 'IRCArural': 'IRCA Rural', 'Municipio': 'Municipio'})
    st.plotly_chart(fig_scatter_irca)

# --- PIE DE P츼GINA ---
st.markdown("---")
st.markdown("<center><small>游꺚 Visualizaci칩n creada por Shaddai Caballero, Samuel Orrego, Oscar Casta침o - 2025</small></center>", unsafe_allow_html=True)

"""**Preparar los datos futuros**"""

#Ya se realizo la preparacion de los datos anteriormente
#Se crean dummies a las variables predictoras categ칩ricas (no a la variable obj)
data_preparada=data.copy()
data_preparada = pd.get_dummies(data, columns=['Departamento','Municipio','A침o','Nivel de riesgo urbano', 'Nivel de riesgo rural'], drop_first=False, dtype=int)
data_preparada.head()

#Se adicionan las columnas faltantes
data_preparada=data_preparada.reindex(columns=variables,fill_value=0)
data_preparada.head()

"""**Prediccion**"""

#Hacemos la predicci칩n con el Tree
Y_fut = modelTree.predict(data_preparada)
data['Tree']=labelencoder.inverse_transform(Y_fut)
data.head()